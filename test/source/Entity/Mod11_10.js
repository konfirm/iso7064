/* global source, describe, it, each, expect */

const Alphabet = require('@konfirm/alphabet');
const ModSubject = source('Entity/Mod11_10');
const ISO7064 = source('Abstract/ISO7064');
const HybridISO7064 = source('Abstract/HybridISO7064');

describe('ISO7064', () => {
	describe('Mod11_10', () => {
		it('is an instance of (Hybrid)ISO7064', (next) => {
			expect(ModSubject.prototype).to.be.instanceof(ISO7064);
			expect(ModSubject.prototype).to.be.instanceof(HybridISO7064);

			next();
		});

		each`
			property      | value
			--------------|-------
			algorithm     | MOD 11,10
			specification | ISO 7064, MOD 11,10
			designation   | ${6}
			modulus       | ${10}
			radix         | ${undefined}
			indices       | ${Alphabet.from('0123456789')}
			alphabet      | ${Alphabet.from('0123456789')}
			double        | ${false}
		`('has $property with value $value', ({ property, value }, next) => {
			expect(ModSubject[property]).to.equal(value);

			next();
		});

		/*  Uses unit test samples from
		 *  https://github.com/LiosK/cdigit/blob/master/test/mod11_10.js
		 */

		describe('normalizes', () => {
			each`
				input              | normal
				-------------------|----------
				0000-0002-1825-009 | 000000021825009
				0000-0002-9079-593 | 000000029079593
				ABCD747633         | 747633
				418.12.925         | 41812925
				17780-4390         | 177804390
				82-00-10-7028943   | 8200107028943
				98-25-46           | 982546
			`('input $input is normalized into $normal', ({ input, normal }, next) => {
				expect(ModSubject.normalize(input)).to.equal(normal);

				next();
			});
		});

		describe('checksum', () => {
			each`
				input                                            | checksum
				-------------------------------------------------|----------
				079                                              | 2
				0794                                             | 5
				6511224300430482                                 | 7	
				53266878780357001264776215687313785128868        | 4	
				003                                              | 2	
				7846306445607555258161616166                     | 2	
				861543053353545631188671371628487317133258177413 | 0	
				4555773880                                       | 8	
				05320162033                                      | 8	
				71065204127183146616272676714658212652753        | 4	
				4716                                             | 6	
				68058451423857734108017363773364282850032        | 1	
				4674678664653                                    | 1	
				42328026                                         | 0	
				500300224343584662684600506004225567445126724117 | 5	
				65428072048156805364127530485864402163255        | 9	
				308655184386                                     | 3	
				4317754156343048540758528678637685134            | 4	
				4600034236774                                    | 1	
				1385812104511745558672550524138724810            | 9	
				1563104756864506624875436082452546036618466424   | 6	
				71660618558507745431171460                       | 5	
				3676012560274058125725682603573122447174631135   | 4	
				853                                              | 7
			`('input $input has checksum $checksum', ({ input, checksum }, next) => {
				expect(ModSubject.checksum(input)).to.equal(checksum);

				next();
			});
		});

		describe('generate', () => {
			each`
				input                                            | computed
				-------------------------------------------------|----------
				0794                                             | 07945
				6511224300430482                                 | 65112243004304827
				53266878780357001264776215687313785128868        | 532668787803570012647762156873137851288684
				003                                              | 0032
				7846306445607555258161616166                     | 78463064456075552581616161662
				861543053353545631188671371628487317133258177413 | 8615430533535456311886713716284873171332581774130
				4555773880                                       | 45557738808
				05320162033                                      | 053201620338
				71065204127183146616272676714658212652753        | 710652041271831466162726767146582126527534
				4716                                             | 47166
				68058451423857734108017363773364282850032        | 680584514238577341080173637733642828500321
				4674678664653                                    | 46746786646531
				42328026                                         | 423280260
				500300224343584662684600506004225567445126724117 | 5003002243435846626846005060042255674451267241175
				65428072048156805364127530485864402163255        | 654280720481568053641275304858644021632559
				308655184386                                     | 3086551843863
				4317754156343048540758528678637685134            | 43177541563430485407585286786376851344
				4600034236774                                    | 46000342367741
				1385812104511745558672550524138724810            | 13858121045117455586725505241387248109
				1563104756864506624875436082452546036618466424   | 15631047568645066248754360824525460366184664246
				71660618558507745431171460                       | 716606185585077454311714605
				3676012560274058125725682603573122447174631135   | 36760125602740581257256826035731224471746311354
				853                                              | 8537
			`('generates $computed for $input', ({ input, computed }, next) => {
				expect(ModSubject.generate(input)).to.equal(computed);

				next();
			});
		});

		describe('validate', () => {
			each`
				input                                             | valid
				--------------------------------------------------|----------
				07945                                             | yes
				17945                                             | no
				07944                                             | no
				65112243004304827                                 | yes
				532668787803570012647762156873137851288684        | yes
				0032                                              | yes
				78463064456075552581616161662                     | yes
				8615430533535456311886713716284873171332581774130 | yes
				45557738808                                       | yes
				053201620338                                      | yes
				710652041271831466162726767146582126527534        | yes
				47166                                             | yes
				680584514238577341080173637733642828500321        | yes
				46746786646531                                    | yes
				423280260                                         | yes
				5003002243435846626846005060042255674451267241175 | yes
				654280720481568053641275304858644021632559        | yes
				3086551843863                                     | yes
				43177541563430485407585286786376851344            | yes
				46000342367741                                    | yes
				13858121045117455586725505241387248109            | yes
				15631047568645066248754360824525460366184664246   | yes
				716606185585077454311714605                       | yes
				36760125602740581257256826035731224471746311354   | yes
				8537                                              | yes
				
			`('validates $input is valid: $valid', ({ input, valid }, next) => {
				expect(ModSubject.validate(input)).to.equal(valid === 'yes');

				next();
			});
		});
	});
});
